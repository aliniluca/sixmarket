datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Using Postgres
generator client {
  provider = "prisma-client-js"

  // The new JSON Protocol is supposed to make cold starts much faster
  // https://github.com/prisma/prisma/issues/18095
  previewFeatures = ["jsonProtocol"]
}

model Listing {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  name        String
  description String?
  condition   Condition  @default(NEW)
  reported    Boolean    @default(false)
  price       Int? // Some items may not have a price, e.g. free items
  images      Image[]
  location    String
  tags        Tag[]
  views       Int        @default(0)
  featured    Boolean    @default(false)
  canDeliver  Boolean    @default(false)
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String
  messages    Message[]
  favorites   Favorite[]
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  listings Listing[]
}

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String   @db.VarChar(2083)
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String
}

model Category {
  id           String    @id @default(cuid())
  name         String    @unique
  slug         String    @unique
  thumbnail    String?   @default("https://via.placeholder.com/150x150.png?text=Thumbnail")
  itemsForSale Listing[]
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Message {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  content     String   @db.VarChar(5000)
  sender      User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("MessageRecipient", fields: [recipientId], references: [id])
  recipientId String
  read        Boolean  @default(false)
  listing     Listing  @relation(fields: [listingId], references: [id])
  listingId   String
}

model Notification {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  type      NotificationType
  content   String
  read      Boolean          @default(false)
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  listingId String?
}

model Review {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  rating     Int
  comment    String
  reviewer   User     @relation("ReviewReviewer", fields: [reviewerId], references: [id])
  reviewerId String
  reviewee   User     @relation("ReviewReviewee", fields: [revieweeId], references: [id])
  revieweeId String
}

// The following User, Account, Session and VerificationToken models are from the NextAuth.js docs
model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  phone            String?        @unique
  accounts         Account[]
  sessions         Session[]
  itemsForSale     Listing[]
  sentMessages     Message[]      @relation("MessageSender")
  receivedMessages Message[]      @relation("MessageRecipient")
  givenReviews     Review[]       @relation("ReviewReviewer")
  receivedReviews  Review[]       @relation("ReviewReviewee")
  favorites        Favorite[]
  address          Address?
  notifications    Notification[]
}

model Address {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  street     String
  city       String
  province   String
  postalCode String
  country    String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Condition {
  NEW
  LIKE_NEW
  EXCELLENT
  GOOD
  FAIR
  SALVAGE
  NOT_APPLICABLE
}

enum NotificationType {
  MESSAGE
  TRANSACTION
  LISTING_UPDATE
  FOLLOW
}
